// Stock Analytics - Settings Page

const API_BASE = '/api';
let currentPortfolio = null;
let currentConfig = null;

// === –£—Ç–∏–ª–∏—Ç—ã ===
function showAlert(message, type = 'success') {
    const container = document.querySelector('.container');
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
        <strong>${type === 'success' ? '‚úì' : '‚úó'}</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    container.insertBefore(alert, container.firstChild);
    
    setTimeout(() => alert.remove(), 5000);
}

// === –ü–æ—Ä—Ç—Ñ–µ–ª—å ===
async function loadPortfolio() {
    try {
        const response = await fetch(`${API_BASE}/portfolio/view`);
        const data = await response.json();
        
        if (data.ok && data.data) {
            currentPortfolio = data.data;
            
            document.getElementById('portfolio-name').value = currentPortfolio.name || '';
            document.getElementById('portfolio-currency').value = currentPortfolio.currency || 'RUB';
            document.getElementById('portfolio-cash').value = currentPortfolio.cash || 0;
            
            renderPositions();
        } else {
            // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
            currentPortfolio = {
                name: '',
                currency: 'RUB',
                cash: 0,
                positions: []
            };
            renderPositions();
        }
    } catch (error) {
        console.error('Error loading portfolio:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è', 'danger');
    }
}

function renderPositions() {
    const container = document.getElementById('positions-list');
    
    if (!currentPortfolio.positions || currentPortfolio.positions.length === 0) {
        container.innerHTML = '<p class="text-muted">–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é.</p>';
        return;
    }
    
    container.innerHTML = currentPortfolio.positions.map((pos, idx) => {
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: qty –∏ quantity
        const quantity = pos.qty || pos.quantity || 0;
        const notes = pos.notes || pos.name || '';
        
        return `
        <div class="card mb-2">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-2">
                        <label class="form-label">–¢–∏–∫–µ—Ä</label>
                        <input type="text" class="form-control" value="${pos.symbol}" 
                               onchange="updatePosition(${idx}, 'symbol', this.value)">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                        <input type="number" class="form-control" value="${quantity}" 
                               onchange="updatePosition(${idx}, 'quantity', parseInt(this.value))">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">–°—Ä. —Ü–µ–Ω–∞</label>
                        <input type="number" class="form-control" value="${pos.avg_price || ''}" 
                               onchange="updatePosition(${idx}, 'avg_price', parseFloat(this.value))">
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">–ó–∞–º–µ—Ç–∫–∏</label>
                        <input type="text" class="form-control" value="${notes}" 
                               onchange="updatePosition(${idx}, 'notes', this.value)">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <button class="btn btn-danger w-100" onclick="removePosition(${idx})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
        `;
    }).join('');
}

function addPosition() {
    if (!currentPortfolio.positions) {
        currentPortfolio.positions = [];
    }
    
    currentPortfolio.positions.push({
        symbol: '',
        quantity: 0,
        avg_price: 0,
        market: 'moex',
        type: 'stock',
        notes: ''
    });
    
    renderPositions();
}

function removePosition(idx) {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ${currentPortfolio.positions[idx].symbol}?`)) {
        currentPortfolio.positions.splice(idx, 1);
        renderPositions();
    }
}

function updatePosition(idx, field, value) {
    currentPortfolio.positions[idx][field] = value;
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è qty <-> quantity
    if (field === 'quantity') {
        currentPortfolio.positions[idx]['qty'] = value;
    }
}

async function savePortfolio() {
    try {
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        const positions = currentPortfolio.positions
            .filter(p => p.symbol) // –¢–æ–ª—å–∫–æ —Å —Ç–∏–∫–µ—Ä–∞–º–∏
            .map(p => ({
                symbol: p.symbol,
                qty: p.qty || p.quantity || 0,
                quantity: p.qty || p.quantity || 0, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                avg_price: p.avg_price || 0,
                market: p.market || 'moex',
                type: p.type || 'stock',
                notes: p.notes || p.name || ''
            }));
        
        const portfolio = {
            name: document.getElementById('portfolio-name').value,
            currency: document.getElementById('portfolio-currency').value,
            cash: parseFloat(document.getElementById('portfolio-cash').value) || 0,
            positions: positions
        };
        
        const response = await fetch(`${API_BASE}/portfolio`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(portfolio)
        });
        
        const data = await response.json();
        
        if (data.ok) {
            showAlert('–ü–æ—Ä—Ç—Ñ–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', 'success');
            loadPortfolio(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        } else {
            showAlert(`–û—à–∏–±–∫–∞: ${data.error || 'Unknown error'}`, 'danger');
        }
        
    } catch (error) {
        console.error('Error saving portfolio:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è', 'danger');
    }
}

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
async function loadConfig() {
    try {
        const response = await fetch(`${API_BASE}/config`);
        const data = await response.json();
        
        if (data.ok) {
            currentConfig = data.data;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            document.getElementById('dividend-target').value = currentConfig.dividend_target_pct;
            document.getElementById('sma-windows').value = currentConfig.windows.sma.join(', ');
            document.getElementById('rate-limit').value = currentConfig.rate_limit.per_symbol_sleep_sec;
            
            // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            document.getElementById('daily-time').value = currentConfig.schedule.daily_time;
            document.getElementById('timezone').value = currentConfig.schedule.tz;
            
            // –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
            renderTickers();
        } else {
            showAlert(`–û—à–∏–±–∫–∞: ${data.error}`, 'danger');
        }
    } catch (error) {
        console.error('Error loading config:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 'danger');
    }
}

function renderTickers() {
    const container = document.getElementById('tickers-list');
    
    if (!currentConfig || !currentConfig.universe || currentConfig.universe.length === 0) {
        container.innerHTML = '<p class="text-muted">–ù–µ—Ç —Ç–∏–∫–µ—Ä–æ–≤</p>';
        return;
    }
    
    container.innerHTML = `
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>‚Ññ</th>
                        <th>–¢–∏–∫–µ—Ä</th>
                        <th>–†—ã–Ω–æ–∫</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${currentConfig.universe.map((ticker, idx) => `
                        <tr>
                            <td>${idx + 1}</td>
                            <td><strong>${ticker.symbol}</strong></td>
                            <td>${ticker.market}</td>
                            <td>
                                <button class="btn btn-sm btn-danger" 
                                        onclick="removeTicker('${ticker.symbol}')">
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

async function addTicker() {
    const symbol = document.getElementById('new-ticker').value.trim().toUpperCase();
    
    if (!symbol) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä', 'warning');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if (!/^[A-Z0-9]+$/.test(symbol)) {
        showAlert('–¢–∏–∫–µ—Ä –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ A-Z –∏ 0-9', 'warning');
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE}/config/add-ticker`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({symbol: symbol, market: 'moex'})
        });
        
        const data = await response.json();
        
        if (data.ok) {
            showAlert(`–¢–∏–∫–µ—Ä ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');
            document.getElementById('new-ticker').value = '';
            loadConfig(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        } else {
            showAlert(`–û—à–∏–±–∫–∞: ${data.error}`, 'danger');
        }
        
    } catch (error) {
        console.error('Error adding ticker:', error);
        showAlert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞', 'danger');
    }
}

async function removeTicker(symbol) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä ${symbol}?`)) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE}/config/remove-ticker/${symbol}`, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.ok) {
            showAlert(`–¢–∏–∫–µ—Ä ${symbol} —É–¥–∞–ª—ë–Ω`, 'success');
            loadConfig(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        } else {
            showAlert(`–û—à–∏–±–∫–∞: ${data.error}`, 'danger');
        }
        
    } catch (error) {
        console.error('Error removing ticker:', error);
        showAlert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞', 'danger');
    }
}

async function saveParameters() {
    try {
        const smaWindows = document.getElementById('sma-windows').value
            .split(',')
            .map(s => parseInt(s.trim()))
            .filter(n => !isNaN(n));
        
        const updateData = {
            dividend_target_pct: parseFloat(document.getElementById('dividend-target').value),
            windows: {sma: smaWindows},
            rate_limit: {
                per_symbol_sleep_sec: parseFloat(document.getElementById('rate-limit').value)
            }
        };
        
        const response = await fetch(`${API_BASE}/config/update`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(updateData)
        });
        
        const data = await response.json();
        
        if (data.ok) {
            showAlert('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        } else {
            showAlert(`–û—à–∏–±–∫–∞: ${data.error}`, 'danger');
        }
        
    } catch (error) {
        console.error('Error saving parameters:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', 'danger');
    }
}

async function saveScheduler() {
    try {
        const time = document.getElementById('daily-time').value;
        const tz = document.getElementById('timezone').value;
        
        const updateData = {
            schedule: {
                daily_time: time,
                tz: tz
            }
        };
        
        const response = await fetch(`${API_BASE}/config/update`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(updateData)
        });
        
        const data = await response.json();
        
        if (data.ok) {
            showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.', 'warning');
        } else {
            showAlert(`–û—à–∏–±–∫–∞: ${data.error}`, 'danger');
        }
        
    } catch (error) {
        console.error('Error saving scheduler:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'danger');
    }
}

async function loadSchedulerStatus() {
    try {
        const response = await fetch('/scheduler/status');
        const data = await response.json();
        
        if (data.ok) {
            const info = document.getElementById('scheduler-status-info');
            const jobs = data.data.jobs;
            
            if (jobs && jobs.length > 0) {
                const job = jobs[0];
                info.className = 'alert alert-success';
                info.innerHTML = `
                    <strong>‚úì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç</strong><br>
                    <small>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${job.next_run_time || 'N/A'}</small>
                `;
            } else {
                info.className = 'alert alert-warning';
                info.innerHTML = '<strong>‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</strong>';
            }
        }
    } catch (error) {
        console.error('Error loading scheduler status:', error);
    }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
window.addEventListener('load', () => {
    loadPortfolio();
    loadConfig();
    loadSchedulerStatus();
});

