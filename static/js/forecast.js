/**
 * Event Forecast - JavaScript –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
 */

const API_BASE = '';
let currentTickers = [];
let refreshInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('Event Forecast initialized');
    loadConfiguration();
    loadForecast();
    loadHistory();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    refreshInterval = setInterval(refreshForecast, 300000);
});

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
 */
async function loadConfiguration() {
    try {
        const response = await fetch(`${API_BASE}/predictor/config`);
        const result = await response.json();
        
        if (result.ok) {
            const config = result.data;
            
            document.getElementById('sources-count').textContent = config.news_sources.length;
            document.getElementById('use-vacancies').textContent = config.use_vacancies ? '–î–∞' : '–ù–µ—Ç';
            document.getElementById('cache-ttl').textContent = config.cache_ttl;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            addTickerSuggestions();
        }
    } catch (error) {
        console.error('Error loading configuration:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
async function loadForecast(tickers = null) {
    try {
        showLoading();
        
        let url = `${API_BASE}/predictor/signal`;
        if (tickers && tickers.length > 0) {
            const tickerParams = tickers.map(t => `tickers=${encodeURIComponent(t)}`).join('&');
            url += `?${tickerParams}`;
            currentTickers = tickers;
        }
        
        const response = await fetch(url);
        const result = await response.json();
        
        if (result.ok) {
            displayForecast(result.data);
        } else {
            showError(result.error);
        }
    } catch (error) {
        console.error('Error loading forecast:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function displayForecast(data) {
    const { signal_level, reason, stats, top_items, companies } = data;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
    updateSignalDisplay(signal_level);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('total-analyzed').textContent = stats.total || 0;
    document.getElementById('positive-count').textContent = stats.relevant || 0;
    document.getElementById('avg-score').textContent = (stats.avg_score || 0).toFixed(2);
    
    document.getElementById('high-count').textContent = stats.HIGH_PROBABILITY || 0;
    document.getElementById('medium-count').textContent = stats.MEDIUM_PROBABILITY || 0;
    document.getElementById('negative-count').textContent = stats.NEGATIVE || 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    document.getElementById('signal-reason').innerHTML = `
        <div class="alert alert-info mb-0">
            <strong>üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong><br>
            ${reason}
        </div>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–∏–≥–Ω–∞–ª–∞
    const card = document.getElementById('signal-detail-card');
    card.className = `card signal-level-card mb-3 signal-${signal_level}`;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏
    displayTopNews(top_items || []);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫
    document.getElementById('news-badge').textContent = (top_items || []).length;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
 */
function updateSignalDisplay(level) {
    const icons = {
        'HIGH_PROBABILITY': 'üöÄ',
        'MEDIUM_PROBABILITY': 'üìä',
        'NEGATIVE_SIGNAL': '‚ö†Ô∏è',
        'LOW': 'üòê'
    };
    
    const labels = {
        'HIGH_PROBABILITY': '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
        'MEDIUM_PROBABILITY': '–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
        'NEGATIVE_SIGNAL': '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª',
        'LOW': '–ù–∏–∑–∫–∏–π —Å–∏–≥–Ω–∞–ª'
    };
    
    const colors = {
        'HIGH_PROBABILITY': 'text-success',
        'MEDIUM_PROBABILITY': 'text-warning',
        'NEGATIVE_SIGNAL': 'text-danger',
        'LOW': 'text-secondary'
    };
    
    document.getElementById('main-signal-icon').textContent = icons[level] || 'üîÆ';
    document.getElementById('current-signal').innerHTML = `
        <span class="${colors[level]}">${labels[level] || level}</span>
    `;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π
 */
function displayTopNews(items) {
    const container = document.getElementById('top-news-list');
    
    if (items.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <p>–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = items.map((item, index) => {
        const categoryClass = getCategoryClass(item.category);
        const keywords = item.matched_keywords || [];
        
        return `
            <div class="news-item ${categoryClass}">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <h6 class="mb-0">${index + 1}. ${escapeHtml(item.title)}</h6>
                    <span class="badge bg-${getCategoryBadge(item.category)}">${item.category}</span>
                </div>
                ${item.description ? `<p class="text-muted small mb-2">${escapeHtml(item.description.substring(0, 150))}...</p>` : ''}
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        ${keywords.slice(0, 5).map(kw => {
                            const isPositive = kw.startsWith('+');
                            const color = isPositive ? 'success' : 'danger';
                            const text = kw.substring(1);
                            return `<span class="badge bg-${color} keyword-badge">${text}</span>`;
                        }).join('')}
                    </div>
                    <small class="text-muted">
                        –ë–∞–ª–ª: <strong class="${item.score > 0 ? 'text-success' : 'text-danger'}">${item.score.toFixed(2)}</strong>
                    </small>
                </div>
            </div>
        `;
    }).join('');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏
 */
function getCategoryClass(category) {
    if (category === 'HIGH_PROBABILITY' || category === 'MEDIUM_PROBABILITY') {
        return 'positive';
    } else if (category === 'NEGATIVE') {
        return 'negative';
    }
    return '';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –±–µ–π–¥–∂–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCategoryBadge(category) {
    const badges = {
        'HIGH_PROBABILITY': 'success',
        'MEDIUM_PROBABILITY': 'warning',
        'NEGATIVE': 'danger',
        'NEUTRAL': 'secondary'
    };
    return badges[category] || 'secondary';
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
 */
async function loadHistory() {
    try {
        const response = await fetch(`${API_BASE}/predictor/history?limit=5`);
        const result = await response.json();
        
        if (result.ok) {
            displayHistory(result.data.items || []);
        }
    } catch (error) {
        console.error('Error loading history:', error);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
 */
function displayHistory(items) {
    const container = document.getElementById('history-timeline');
    
    if (items.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-3">
                –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
            </div>
        `;
        return;
    }
    
    container.innerHTML = items.map(item => {
        const markerClass = getMarkerClass(item.signal_level);
        const timestamp = new Date(item.timestamp).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        return `
            <div class="timeline-item">
                <div class="timeline-marker ${markerClass}"></div>
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-2">
                        <small class="text-muted d-block">${timestamp}</small>
                        <strong class="d-block">${formatSignalLevel(item.signal_level)}</strong>
                        <small class="text-muted">${(item.stats?.total || 0)} –Ω–æ–≤–æ—Å—Ç–µ–π</small>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
 */
function getMarkerClass(level) {
    const classes = {
        'HIGH_PROBABILITY': 'high',
        'MEDIUM_PROBABILITY': 'medium',
        'NEGATIVE_SIGNAL': 'negative',
        'LOW': 'low'
    };
    return classes[level] || 'low';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
 */
function formatSignalLevel(level) {
    const labels = {
        'HIGH_PROBABILITY': 'üöÄ –í—ã—Å–æ–∫–∏–π',
        'MEDIUM_PROBABILITY': 'üìä –°—Ä–µ–¥–Ω–∏–π',
        'NEGATIVE_SIGNAL': '‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π',
        'LOW': 'üòê –ù–∏–∑–∫–∏–π'
    };
    return labels[level] || level;
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
 */
function addTickerSuggestions() {
    const container = document.getElementById('ticker-suggestions');
    const popularTickers = [
        ['SBER', 'GAZP', 'YNDX'],
        ['VTBR', 'LKOH', 'GMKN'],
        ['SPBE', 'MOEX', 'RTKM']
    ];
    
    container.innerHTML = popularTickers.map(group => {
        const groupName = group.join(', ');
        return `
            <button class="btn btn-sm btn-outline-primary" 
                    onclick="quickAnalyze(['${group.join("','")}'])">
                ${groupName}
            </button>
        `;
    }).join('');
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–∏–∫–µ—Ä–æ–≤
 */
function quickAnalyze(tickers) {
    document.getElementById('ticker-input').value = tickers.join(', ');
    analyzeCustomTickers();
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
 */
function analyzeCustomTickers() {
    const input = document.getElementById('ticker-input').value;
    if (!input.trim()) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä');
        return;
    }
    
    const tickers = input.split(',').map(t => t.trim().toUpperCase()).filter(t => t);
    loadForecast(tickers);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function refreshForecast() {
    const icon = document.getElementById('refresh-icon');
    icon.classList.add('pulse');
    
    if (currentTickers.length > 0) {
        loadForecast(currentTickers);
    } else {
        loadForecast();
    }
    
    loadHistory();
    
    setTimeout(() => {
        icon.classList.remove('pulse');
    }, 2000);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
 */
function showLoading() {
    document.getElementById('top-news-list').innerHTML = `
        <div class="text-center text-muted py-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            <p class="mt-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏...</p>
        </div>
    `;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
 */
function showError(message) {
    document.getElementById('top-news-list').innerHTML = `
        <div class="alert alert-danger">
            <strong>–û—à–∏–±–∫–∞:</strong> ${escapeHtml(message)}
        </div>
    `;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }
});

