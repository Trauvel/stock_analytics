"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
–ó–∞–ø—É—Å–∫: python test_forecast_api.py
"""
import asyncio
import sys
import os

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')


async def test_predictor_api():
    """–¢–µ—Å—Ç API endpoint'–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    print("=" * 70)
    print("  –¢–ï–°–¢ API –ú–û–î–£–õ–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 70)
    print()
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
        print("1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è...")
        from app.predictor import generate_event_signals
        print("   ‚úÖ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print()
        
        # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –±–µ–∑ —Ç–∏–∫–µ—Ä–æ–≤
        print("2Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ (–±–µ–∑ —Ç–∏–∫–µ—Ä–æ–≤)...")
        try:
            signal = await generate_event_signals()
            print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal['signal_level']}")
            print(f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {signal['stats'].get('total', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
            print("   (–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
        print()
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–∏–∫–µ—Ä–∞–º–∏
        print("3Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ —Å —Ç–∏–∫–µ—Ä–∞–º–∏...")
        try:
            signal = await generate_event_signals(['SBER', '–°–±–µ—Ä–±–∞–Ω–∫'])
            print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal['signal_level']}")
            print(f"   üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal['reason'][:100]}...")
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            stats = signal['stats']
            print(f"      - –í—Å–µ–≥–æ: {stats.get('total', 0)}")
            print(f"      - HIGH: {stats.get('HIGH_PROBABILITY', 0)}")
            print(f"      - MEDIUM: {stats.get('MEDIUM_PROBABILITY', 0)}")
            print(f"      - NEGATIVE: {stats.get('NEGATIVE', 0)}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
        print()
        
        # –¢–µ—Å—Ç 4: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print("4Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            from app.predictor.config import PredictorConfig
            config = PredictorConfig.load()
            print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print(f"   üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(config.news_sources)}")
            print(f"   üîë –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(config.positive_keywords)}")
            print(f"   üîë –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(config.negative_keywords)}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        print()
        
        # –¢–µ—Å—Ç 5: –ò—Å—Ç–æ—Ä–∏—è
        print("5Ô∏è‚É£ –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π...")
        try:
            import json
            from pathlib import Path
            
            history_file = Path("data/events_history.json")
            if history_file.exists():
                with open(history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                print(f"   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: {len(history)} –∑–∞–ø–∏—Å–µ–π")
                if history:
                    last = history[-1]
                    print(f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {last['signal_level']}")
            else:
                print(f"   ‚ÑπÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞ (—Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
        print()
        
        print("=" * 70)
        print("  ‚úÖ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
        print("=" * 70)
        print()
        print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        print("  2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000/static/forecast.html")
        print()
        
        return True
        
    except Exception as e:
        print("=" * 70)
        print(f"  ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("=" * 70)
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    try:
        result = asyncio.run(test_predictor_api())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)

