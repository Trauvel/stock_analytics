"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
–ó–∞–ø—É—Å–∫: python test_predictor_demo.py
"""
import asyncio
import json
from app.predictor import generate_event_signals
from app.predictor.config import PredictorConfig


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("=" * 70)
    print("  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–î–£–õ–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –ù–û–í–û–°–¢–ù–´–• –í–°–ü–õ–ï–°–ö–û–í")
    print("=" * 70)
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = PredictorConfig.load()
    print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print(f"  - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(config.news_sources)}")
    print(f"  - –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(config.positive_keywords)}")
    print(f"  - –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(config.negative_keywords)}")
    print(f"  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π: {config.use_vacancies}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    test_companies = [
        ['SBER', '–°–±–µ—Ä–±–∞–Ω–∫'],
        ['GAZP', '–ì–∞–∑–ø—Ä–æ–º'],
        ['YNDX', '–Ø–Ω–¥–µ–∫—Å'],
    ]
    
    for companies in test_companies:
        print("-" * 70)
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è: {', '.join(companies)}")
        print("-" * 70)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await generate_event_signals(target_companies=companies)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüîÆ –°–ò–ì–ù–ê–õ: {signal['signal_level']}")
            print(f"\nüìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
            print(f"   {signal['reason']}")
            
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            stats = signal.get('stats', {})
            print(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total', 0)}")
            print(f"   - HIGH_PROBABILITY: {stats.get('HIGH_PROBABILITY', 0)}")
            print(f"   - MEDIUM_PROBABILITY: {stats.get('MEDIUM_PROBABILITY', 0)}")
            print(f"   - NEGATIVE: {stats.get('NEGATIVE', 0)}")
            print(f"   - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats.get('avg_score', 0.0):.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π
            top_items = signal.get('top_items', [])
            if top_items:
                print(f"\nüî• –¢–æ–ø-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:")
                for i, item in enumerate(top_items[:3], 1):
                    print(f"\n   {i}. {item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                    print(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', 'N/A')}")
                    print(f"      –ë–∞–ª–ª: {item.get('score', 0.0):.2f}")
                    keywords = item.get('matched_keywords', [])
                    if keywords:
                        print(f"      –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords[:5])}")
            
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            import traceback
            traceback.print_exc()
        
        print()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(2)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("=" * 70)
    print("  –ü–†–ò–ú–ï–† –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –°–ò–°–¢–ï–ú–û–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("=" * 70)
    print()
    
    from app.reco.engine import make_reco
    from app.reco.models import TickerSnapshot, RecoConfig
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π snapshot
    snapshot = TickerSnapshot(
        symbol="SBER",
        price=270.0,
        sma200=280.0,
        dy_pct=9.5,
        trend_pct_20d=1.2,
        high_52w=320.0,
        low_52w=240.0
    )
    
    reco_config = RecoConfig()
    
    # –ë–µ–∑ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    reco_without = make_reco(snapshot, reco_config)
    print("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ë–ï–ó –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {reco_without.action}")
    print(f"   Score: {reco_without.score}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
    signal = await generate_event_signals(['SBER'])
    
    # –° —Å–∏–≥–Ω–∞–ª–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    reco_with = make_reco(snapshot, reco_config, event_signal=signal)
    print("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –° –º–æ–¥—É–ª–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {reco_with.action}")
    print(f"   Score: {reco_with.score}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤ score: {reco_with.score - reco_without.score:+.2f}")
    print()
    
    if reco_with.reasons:
        print("   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
        for reason in reco_with.reasons:
            print(f"   - {reason}")
    
    print()
    print("=" * 70)
    print("  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 70)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

