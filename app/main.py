"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""

import sys
import signal
from contextlib import asynccontextmanager

from pathlib import Path
from fastapi import FastAPI, Query
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from loguru import logger
import uvicorn
from typing import Optional, List

from app.api.server import app as api_app
from app.scheduler.daily_job import DailyJobScheduler


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
    """
    global scheduler
    
    # Startup
    logger.info("Starting application...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = DailyJobScheduler()
    scheduler.start(run_immediately=False)
    
    logger.info("Application started successfully")
    
    yield
    
    # Shutdown
    logger.info("Shutting down application...")
    
    if scheduler:
        scheduler.stop()
    
    logger.info("Application stopped")


# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title="Stock Analytics",
    description="–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–∫—Ü–∏–π –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
    version="0.1.0",
    lifespan=lifespan
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è GUI
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
    logger.info("Static files mounted at /static")
except RuntimeError:
    logger.warning("Static directory not found, GUI will not be available")

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –∏–∑ api_app
app.mount("/api", api_app)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –æ—Ç–¥–∞—ë–º HTML GUI
@app.get("/", response_class=HTMLResponse)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ GUI."""
    index_path = Path("static/index.html")
    
    if index_path.exists():
        with open(index_path, encoding='utf-8') as f:
            return HTMLResponse(content=f.read())
    
    # Fallback –µ—Å–ª–∏ –Ω–µ—Ç GUI
    return HTMLResponse(content=f"""
        <html>
            <head><title>Stock Analytics</title></head>
            <body style="font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px;">
                <h1>üìä Stock Analytics</h1>
                <p><strong>Status:</strong> Running</p>
                <p><strong>Version:</strong> 0.1.0</p>
                <p><strong>Scheduler:</strong> {"running" if scheduler and scheduler.scheduler.running else "stopped"}</p>
                <hr>
                <h2>Links:</h2>
                <ul>
                    <li><a href="/api/docs">üìñ API Documentation (Swagger)</a></li>
                    <li><a href="/api/redoc">üìÑ API Documentation (ReDoc)</a></li>
                    <li><a href="/scheduler/status">‚è∞ Scheduler Status</a></li>
                </ul>
                <hr>
                <p><em>GUI not found. Make sure static/ directory exists with index.html</em></p>
            </body>
        </html>
    """)


@app.get("/scheduler/status")
async def scheduler_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    if not scheduler:
        return {
            "ok": False,
            "error": "Scheduler not initialized"
        }
    
    return {
        "ok": True,
        "data": {
            "running": scheduler.scheduler.running,
            "jobs": scheduler.get_job_info()
        }
    }


@app.post("/scheduler/run-now")
async def run_job_now():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."""
    if not scheduler:
        return {
            "ok": False,
            "error": "Scheduler not initialized"
        }
    
    logger.info("Manual job trigger requested via API")
    
    try:
        success = scheduler.run_once()
        
        return {
            "ok": success,
            "message": "Job completed successfully" if success else "Job failed, check logs"
        }
    except Exception as e:
        logger.error(f"Error running job manually: {e}")
        return {
            "ok": False,
            "error": str(e)
        }


# === –ú–æ–¥—É–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api) ===

@app.get("/predictor/signal")
async def get_predictor_signal(tickers: Optional[List[str]] = Query(default=None)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."""
    try:
        from app.predictor import generate_event_signals
        from app.config.loader import get_config
        
        if not tickers:
            config = get_config()
            tickers = [t.symbol for t in config.universe[:5]]
        
        signal = await generate_event_signals(target_companies=tickers)
        
        return {
            "ok": True,
            "data": signal
        }
    except Exception as e:
        logger.error(f"Error generating event signal: {e}")
        return {
            "ok": False,
            "error": str(e)
        }


@app.get("/predictor/history")
async def get_predictor_history(limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    try:
        import json
        from pathlib import Path
        
        history_file = Path("data/events_history.json")
        
        if not history_file.exists():
            return {
                "ok": True,
                "data": {
                    "items": [],
                    "count": 0
                }
            }
        
        with open(history_file, 'r', encoding='utf-8') as f:
            history = json.load(f)
        
        recent = history[-limit:] if len(history) > limit else history
        recent.reverse()
        
        return {
            "ok": True,
            "data": {
                "items": recent,
                "count": len(recent),
                "total": len(history)
            }
        }
    except Exception as e:
        logger.error(f"Error getting event history: {e}")
        return {
            "ok": False,
            "error": str(e)
        }


@app.get("/predictor/config")
async def get_predictor_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    try:
        from app.predictor.config import PredictorConfig
        
        config = PredictorConfig.load()
        
        return {
            "ok": True,
            "data": {
                "news_sources": config.news_sources,
                "use_vacancies": config.use_vacancies,
                "positive_keywords": config.positive_keywords[:10],
                "negative_keywords": config.negative_keywords[:10],
                "cache_ttl": config.cache_ttl,
                "events_log_path": config.events_log_path
            }
        }
    except Exception as e:
        logger.error(f"Error getting predictor config: {e}")
        return {
            "ok": False,
            "error": str(e)
        }


def handle_shutdown(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    logger.info(f"Received signal {signum}, shutting down gracefully...")
    
    if scheduler:
        scheduler.stop()
    
    sys.exit(0)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, handle_shutdown)
signal.signal(signal.SIGTERM, handle_shutdown)


if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        log_level="info",
        reload=False  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º reload —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
    )

