"""–î–≤–∏–∂–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""

from typing import Optional, Dict
from .models import TickerSnapshot, RecoConfig, Recommendation
import asyncio
import logging

logger = logging.getLogger(__name__)


async def get_event_signal_async(ticker: str) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        from app.predictor import generate_event_signals
        signal = await generate_event_signals(target_companies=[ticker])
        return signal
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è {ticker}: {e}")
        return None


def get_event_signal(ticker: str) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞).
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏–ª–∏ None
    """
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
            return None  # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_event_signal_async
        else:
            return loop.run_until_complete(get_event_signal_async(ticker))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return None


def pct_diff(current: Optional[float], reference: Optional[float]) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."""
    if current is None or reference is None or reference == 0:
        return 0.0
    return (current - reference) / reference * 100.0


def make_reco(
    snapshot: TickerSnapshot, 
    config: RecoConfig,
    event_signal: Optional[Dict] = None
) -> Recommendation:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏ scoring.
    
    Args:
        snapshot: –°–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–∫–µ—Ä—É
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤
        event_signal: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        
    Returns:
        Recommendation: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
    """
    score = 0.0
    reasons = []
    confidence_factors = []
    
    # === 0. –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π ===
    if event_signal and config.event_predictor_enabled:
        signal_level = event_signal.get('signal_level', 'LOW')
        weights = config.event_predictor_weights
        
        if signal_level in weights:
            weight = weights[signal_level]
            if weight != 0:
                score += weight
                
                if signal_level == 'HIGH_PROBABILITY':
                    reasons.append(f"üîÆ {event_signal.get('reason', '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π')}")
                    confidence_factors.append(1.0)
                elif signal_level == 'MEDIUM_PROBABILITY':
                    reasons.append(f"üîÆ {event_signal.get('reason', '–£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω')}")
                    confidence_factors.append(0.5)
                elif signal_level == 'NEGATIVE_SIGNAL':
                    reasons.append(f"‚ö†Ô∏è {event_signal.get('reason', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω')}")
                    confidence_factors.append(1.0)
    
    # === 1. –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ ===
    if snapshot.dy_pct is not None:
        if snapshot.dy_pct >= config.dy_buy_min:
            score += 1.5
            reasons.append(f"‚úì –î–∏–≤–∏–¥–µ–Ω–¥—ã {snapshot.dy_pct:.1f}% ‚â• {config.dy_buy_min}%")
            confidence_factors.append(1)
            
            if snapshot.dy_pct >= config.dy_very_high:
                score += 0.5
                reasons.append(f"‚úì –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è DY {snapshot.dy_pct:.1f}%")
                confidence_factors.append(1)
        elif snapshot.dy_pct < config.dy_buy_min * 0.5:
            score -= 0.5
            reasons.append(f"‚úó –ù–∏–∑–∫–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã {snapshot.dy_pct:.1f}%")
    
    # === 2. –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ SMA200 ===
    if snapshot.sma200 and snapshot.price:
        d_vs_sma200 = pct_diff(snapshot.price, snapshot.sma200)
        
        if d_vs_sma200 <= config.max_discount_vs_sma200:
            score += 1.0
            reasons.append(f"‚úì –¶–µ–Ω–∞ {d_vs_sma200:.1f}% –Ω–∏–∂–µ SMA200 (–¥–∏—Å–∫–æ–Ω—Ç)")
            confidence_factors.append(1)
        elif d_vs_sma200 >= config.min_premium_vs_sma200:
            score -= 1.0
            reasons.append(f"‚úó –¶–µ–Ω–∞ {d_vs_sma200:.1f}% –≤—ã—à–µ SMA200 (–ø—Ä–µ–º–∏—è)")
            confidence_factors.append(1)
        else:
            # –û–∫–æ–ª–æ SMA200 - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
            reasons.append(f"‚óã –¶–µ–Ω–∞ –æ–∫–æ–ª–æ SMA200 ({d_vs_sma200:.1f}%)")
    
    # === 3. –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ (20 –¥–Ω–µ–π) ===
    if snapshot.trend_pct_20d is not None:
        if snapshot.trend_pct_20d >= config.trend_up_min:
            score += 0.8
            reasons.append(f"‚úì –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ {snapshot.trend_pct_20d:.1f}%")
            confidence_factors.append(1)
        elif snapshot.trend_pct_20d <= config.trend_down_max:
            score -= 0.8
            reasons.append(f"‚úó –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ {snapshot.trend_pct_20d:.1f}%")
            confidence_factors.append(1)
    
    # === 4. –ü–æ–∑–∏—Ü–∏—è –≤ 52W –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑) ===
    if snapshot.high_52w and snapshot.low_52w and snapshot.price:
        range_52w = snapshot.high_52w - snapshot.low_52w
        if range_52w > 0:
            position_in_range = (snapshot.price - snapshot.low_52w) / range_52w
            
            if position_in_range < config.near_52w_low_threshold:
                score += 0.5
                reasons.append(f"‚úì –¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π —Ç—Ä–µ—Ç–∏ 52W ({position_in_range*100:.0f}%)")
                confidence_factors.append(0.5)
            elif position_in_range > config.near_52w_high_threshold:
                score -= 0.5
                reasons.append(f"‚úó –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã 52W ({position_in_range*100:.0f}%)")
                confidence_factors.append(0.5)
    
    # === 5. –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ===
    if snapshot.signals:
        positive_signals = [
            'PRICE_BELOW_SMA200', 
            'SMA50_CROSS_UP_SMA200',
            'DY_GT_TARGET',
            'NEAR_52W_LOW'
        ]
        negative_signals = [
            'PRICE_ABOVE_SMA200',
            'SMA50_CROSS_DOWN_SMA200',
            'NEAR_52W_HIGH'
        ]
        
        for sig in snapshot.signals:
            if sig in positive_signals:
                score += 0.3
                confidence_factors.append(0.3)
            elif sig in negative_signals:
                score -= 0.3
                confidence_factors.append(0.3)
    
    # === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ===
    if score >= config.buy_score_cutoff:
        action = "BUY"
    elif score <= config.sell_score_cutoff:
        action = "SELL"
    else:
        action = "HOLD"
    
    # === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ===
    confidence_score = sum(confidence_factors)
    if confidence_score >= 3.0:
        confidence = "HIGH"
    elif confidence_score >= 1.5:
        confidence = "MEDIUM"
    else:
        confidence = "LOW"
    
    # === –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ ===
    sizing = _sizing_hint(action, snapshot, config, score)
    
    return Recommendation(
        action=action,
        score=round(score, 2),
        reasons=reasons,
        sizing_hint=sizing,
        confidence=confidence
    )


def _sizing_hint(
    action: str, 
    snapshot: TickerSnapshot, 
    config: RecoConfig,
    score: float
) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏."""
    if action == "BUY":
        # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if score >= 4.0:
            return "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–æ 2√ó –æ—Ç –±–∞–∑–æ–≤–æ–π"
        # –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è: –±–æ–ª—å—à–æ–π –¥–∏—Å–∫–æ–Ω—Ç –∫ SMA200 + –≤—ã—Å–æ–∫–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã
        elif (snapshot.sma200 and snapshot.price and 
              (snapshot.price < 0.9 * snapshot.sma200) and 
              (snapshot.dy_pct and snapshot.dy_pct >= 12)):
            return "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–æ 1.5√ó –æ—Ç –±–∞–∑–æ–≤–æ–π"
        else:
            return "–ë–∞–∑–æ–≤–∞—è –¥–æ–ª—è (1√ó)"
    
    elif action == "SELL":
        if score <= -4.0:
            return "–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        elif score <= -3.0:
            return "–°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 50%"
        else:
            return "–°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 25%"
    
    return None

